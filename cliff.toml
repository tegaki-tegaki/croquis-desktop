# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {%- for commit in commits -%}
        - {% if commit.breaking %}[:warning:breaking:warning:] {% endif %}{{ commit.message | upper_first }}\
{% endfor %}
{% endfor %}\n

{% if version %}
    {% if previous.version %}
      **Full Changelog**: https://github.com/tegaki-tegaki/croquis-desktop/compare/{{ previous.version }}...{{ version }}
    {% endif %}
{% else -%}
  {% raw %}\n{% endraw %}
{% endif %}
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""
postprocessors = [
  { pattern = '\:.*\:\s+(.*)', replace = '${1}' },
] # postprocessors
[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = false
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
# commit_preprocessors = [
#   { pattern = '\:.*\:\(.*\)', replace = "${1}" }
# ]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^:sparkles:", group = "<!-- 0 -->✨ Features" },
  { message = "^:bug:", group = "<!-- 1 -->🐛 Bug Fixes" },
  { message = "^:zap:", group = "<!-- 3 -->⚡️ Performance" },
  { body = ".*security", group = "<!-- 4 -->🔒 Security" },
  { message = "^:lipstick:", group = "<!-- 5 -->💄 Styling", skip = true },
  { message = "^:memo:", group = "<!-- 6 -->📝 Documentation", skip = true },
  { message = "^:recycle:", group = "<!-- 7 -->♻️ Refactor", skip = true },
  { message = "^:test_tube:", group = "<!-- 8 -->🧪 Testing", skip = true },
  { message = "^chore|:construction_worker:", group = "<!-- 9 -->🚧 Miscellaneous Tasks", skip = true },
  { message = "^:construction:|:label:|:bookmark:|:alembic:|:rocket:", skip = true },
  { message = "^revert", group = "Revert" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"

# regex for skipping tags
skip_tags = "beta|alpha"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
# limit the number of commits included in the changelog.
# limit_commits = 42
